module.exports = function(RED) {
  "use strict";
  var bciLib = require("./bci-lib");
  var config = require("./bci-config");

  function ProfileNameNode(n) {
    RED.nodes.createNode(this, n);
    var node          = this;
    var profile       = n.profileName;
    var tempProfile   = "default";
    var auth          = "";
    var globalContext = this.context().global;
    var loadedProfile = null;
    var headsetID     = null;

    function startconn() {
      // Connect to remote endpoint
      node.tout   = null;
      node.socket = globalContext.get("socket");
      handleConnection();
    }

    function handleConnection() {
      node.socket.on("open", function() {
        node.status({
          fill : "white",
          shape: "ring",
          text : "Connecting ..."
        });
      });

      node.socket.on("close", function() {
        node.status({
          fill : "red",
          shape: "ring",
          text : 
            "Please ensure that you have Cortex installed and running in the background."
        });
        if (!node.closing) {
          clearTimeout(node.tout);
          node.tout = setTimeout(function() {
            startconn();
          }, 3000);
        }
      });

      node.socket.on("message", function(data) {
        var msg = JSON.parse(data);

        if (!!msg.error) {
          switch (msg.error.code) {
            case config.errorCode.ERR_PROFILE_CONFLICT: 
              if (profile != null && loadedProfile != null) {
                if (profile === loadedProfile) {
                  node.status({
                    fill : "green",
                    shape: "dot",
                    text : "Loaded profile: " + profile
                  });
                } else {
                  // Another profile is loaded by another Cortex-Based Apps, you can only load that same profile
                  node.status({
                    fill : "red",
                    shape: "dot",
                    text : `Can only load profile ${loadedProfile} for now!`
                  });
                }
              }
              break;

            default: 
              node.status({
                fill : "green",
                shape: "dot",
                text : `Loaded profile ${profile}`
              });
              break;
          }
        }

        switch (msg.id) {
          case "queryProfile": 
            if (msg.result.length > 0) {
              var isProfileFound = false;

              for (var i in msg.result) {
                if (profile == msg.result[i].name) {
                  tempProfile    = msg.result[i].name;
                  isProfileFound = true;
                  break;
                }
              }

              if (isProfileFound) {
                if (!!profile && profile != "") {
                  // Use trained profile
                  bciLib.loadProfile(node, auth, headsetID, profile);
                  node.status({
                    fill : "green",
                    shape: "dot",
                    text : "Loaded profile: " + tempProfile
                  });
                }
                // storeContextToFlow(auth, profile);
              } else {
                node.status({
                  fill : "red",
                  shape: "dot",
                  text : `Invalid profile`
                });
              }
            } else {
              node.status({
                fill : "red",
                shape: "dot",
                text : `Profile list is empty!`
              });
            }
            break;

          case "getCurrentProfile": 
            if (msg.result != null) {
              loadedProfile = msg.result;
              if (profile === loadedProfile) {
                // Use the loading profile without loading again
                node.status({
                  fill : "green",
                  shape: "dot",
                  text : "Loaded profile: " + profile
                });
              } else {
                node.status({
                  fill : "red",
                  shape: "dot",
                  text : 
                    "It appears you are using a different training profile in another application. Please close the other application and try again."
                });
              }
            } else {
              bciLib.queryProfile(node, auth);
            }
            // Send auth, profile name to other nodes
            storeContextToFlow(auth, profile);
            break;

          case "unloadProfile": 
            bciLib.loadProfile(node, auth, headsetID, profile);
            break;

          case "loadProfile": 
            break;
        }
      });
    }

    function storeContextToFlow(msg1, msg2) {
      // msg1: Auth token, msg2: Profile name
      node.send({ payload: [msg1, msg2] });
    }

    this.on("input", function(msg) {
      auth = msg.payload[0];

      headsetID = node.context().global.get("headsetID");
      bciLib.getCurrentProfile(node, auth, headsetID);
    });

    node.closing = false;
    startconn(); // start outbound connection

    node.on("close", function() {
      setTimeout(() => {
        node.closing = true;
        node.socket.close();
        if (node.tout) {
          clearTimeout(node.tout);
        }
      }, 3000);
    });
  }

  RED.nodes.registerType("Profile-Name", ProfileNameNode);
};
